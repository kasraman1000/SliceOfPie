Der var engang en dreng der hed Birger.\n
Birger var en rigtig dum dreng og blev drillet i skolen.\n
Det var der også god grund til fordi han var nemlig født med et mentalt handicap.\n
Birger døde desværre i en meget voldelig sneboldskamp i skolen.\n
Men det var nok for det bedre :)

Der var engang en lille dreng der hed Kewin.\n
Birger var en rigtig rigtig dum dreng og blev drillet i skolen.\n
Det var der også god grund til fordi han var nemlig født med et mentalt handicap og lav højde.\n
Kewin døde desværre i en meget voldelig sneboldskamp i skolen.\n
Men det var nok for det bedre :)

// IN HERE I ADD ONE LINE IN THE MIDDLE AND CHANGE SOMETHING IN FIRST LINE

Jeg vil gerne snart spille computer.\n
Fordi jeg er snart godt træt af det her work-all-day.


Jeg vil gerne MEGET snart spille computer.\n
Det måtte gerne være et teamspil hvis det er. \n
Fordi jeg er snart godt træt af det her work-all-day.

// IN THESE I DELETE SOMETHING IN THE MIDDLE

Some of the things that are always hard, when doing usability tests on random persons, are to not make them feel stupid. If we give them a task which wouldn’t be that easy to solve as the first task, or a task which our program handles badly the test-person might feel stupid, but what we really want them to think is that the problem is the program and not their effort, that doesn’t get the job done.\n
That is why we have encouraged all our test-persons to read the user manual thoroughly, as well as test out the program a bit before starting with the task list.\n
We picked our test-persons, by going around on the university and talk to different kind of people at different stages of their education, to get some variation. As well as the students we found at the university we also tried to talk some of our family members which are of an entirely different target market, again to give us larger variation.


Some of the things that are always hard, when doing usability tests on random persons, are to not make them feel stupid. If we give them a task which wouldn’t be that easy to solve as the first task, or a task which our program handles badly the test-person might feel stupid, but what we really want them to think is that the problem is the program and not their effort, that doesn’t get the job done.\n
We picked our test-persons, by going around on the university and talk to different kind of people at different stages of their education, to get some variation. As well as the students we found at the university we also tried to talk some of our family members which are of an entirely different target market, again to give us larger variation.

// HERE I ADD MULTIPLE LINES IN  THE MIDDLE

Examples oon when to use wait() and notify()\n
For controlling shared resources ("pooling") such as database connections. If all resources are currently in use, one thread can wait to be notified that a resource has become available.\n
For background execution or coordinating multi-threaded execution: the controlling thread can wait for other threads to notify it of completion of a task.\n
For creating thread pools or job queues on a server: a fixed number of threads would sit waiting to be notified that a new job had been added to the list.\n
(btw, “Calling wait() automatically releases the lock of the object you are waiting on, but does not release locks on other objects”)

Examples oon when to use wait() and notify()\n
For controlling shared resources ("pooling") such as database connections. If all resources are currently in use, one thread can wait to be notified that a resource has become available.\n
(btw, “Calling wait() automatically releases the lock of the object you are waiting on, but does not release locks on other objects”)



